#region	License

//------------------------------------------------------------------------------------------------
// <Auto-generated>
//     <Author> Top Nguyen (http://topnguyen.net) </Author>
//     <Project> TopCore.Auth.Data </Project>
//     <File> 
//         <Name> TopCoreAuthDbContext.SSOContextFactory.cs </Name>
//         <Created> 28 03 2017 05:50:31 PM </Created>
//         <Key> 0679F181-B40B-49BF-A6A6-1AFA54A83376 </Key>
//     </File>
//     <Summary>
//         TopCoreAuthDbContext.SSOContextFactory
//     </Summary>
// </Auto-generated>
//------------------------------------------------------------------------------------------------

#endregion License

using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using TopCore.Auth.Domain.Models;
using TopCore.Framework.Core;

namespace TopCore.Auth.Data
{
    public class TopCoreAuthDbContextFactory : IDbContextFactory<TopCoreAuthDbContext>
    {
        public TopCoreAuthDbContext Create(DbContextFactoryOptions options)
        {
            var connectionString = GetConnectionString(options);
            return CreateCoreContext(connectionString);
        }

        /// <summary>
        /// Get connection from DbContextFactoryOptions Environment
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        private string GetConnectionString(DbContextFactoryOptions options)
        {
            var connectionString = ConfigHelper.GetValue("appsettings.json", $"ConnectionStrings:{options.EnvironmentName}");
            return connectionString;
        }

        private static TopCoreAuthDbContext CreateCoreContext(string connectionString)
        {
            var builder = new DbContextOptionsBuilder<TopCoreAuthDbContext>();
            builder.UseSqlServer(connectionString, optionsBuilder => optionsBuilder.MigrationsAssembly(typeof(DataModule).GetTypeInfo().Assembly.GetName().Name));
            return new TopCoreAuthDbContext(builder.Options);
        }
    }
}