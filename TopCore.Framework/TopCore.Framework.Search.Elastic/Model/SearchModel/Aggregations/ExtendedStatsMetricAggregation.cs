using TopCore.Framework.Search.Elastic.Utils;

namespace TopCore.Framework.Search.Elastic.Model.SearchModel.Aggregations
{
    /// <summary>
    ///     A multi-value metrics aggregation that computes stats over numeric values extracted from
    ///     the aggregated documents. These values can be extracted either from specific numeric
    ///     fields in the documents, or be generated by a provided script. The extended_stats
    ///     aggregations is an extended version of the stats aggregation, where additional metrics
    ///     are added such as sum_of_squares, variance, std_deviation and std_deviation_bounds.
    /// </summary>
    public class ExtendedStatsMetricAggregation : BaseMetricAggregation
    {
        private double _sigma;
        private bool _sigmaSet;

        public ExtendedStatsMetricAggregation(string name, string field) : base("extended_stats", name, field)
        {
        }

        /// <summary>
        ///     support from version 1.4.3 By default, the extended_stats metric will return an
        ///     object called std_deviation_bounds, which provides an interval of plus/minus two
        ///     standard deviations from the mean. This can be a useful way to visualize variance of
        ///     your data. If you want a different boundary. sigma can be any non-negative double,
        ///     meaning you can request non-integer values such as 1.5. A value of 0 is valid, but
        ///     will simply return the average for both upper and lower bounds. Note Standard
        ///     Deviation and Bounds require normality The standard deviation and its bounds are
        ///     displayed by default, but they are not always applicable to all data-sets. Your data
        ///     must be normally distributed for the metrics to make sense. The statistics behind
        ///     standard deviations assumes normally distributed data, so if your data is skewed
        ///     heavily left or right, the value returned will be misleading.
        /// </summary>
        public double Sigma
        {
            get => _sigma;
            set
            {
                _sigma = value;
                _sigmaSet = true;
            }
        }

        public override void WriteJson(ElasticJsonWriter elasticCrudJsonWriter)
        {
            WriteJsonBase(elasticCrudJsonWriter, WriteValues);
        }

        private void WriteValues(ElasticJsonWriter elasticCrudJsonWriter)
        {
            JsonHelper.WriteValue("sigma", _sigma, elasticCrudJsonWriter, _sigmaSet);
        }
    }
}