using System.Collections.Generic;
using TopCore.Framework.Search.Elastic.Model;
using TopCore.Framework.Search.Elastic.Utils;

namespace TopCore.Framework.Search.Elastic.ContextAddDeleteUpdate.IndexModel.SettingsModel.Filters
{
	public class CjkBigramTokenFilter : AnalysisFilterBase
    {
        private List<string> _ignoreScripts;
        private bool _ignoreScriptsSet;
        private bool _outputUnigrams;
        private bool _outputUnigramsSet;

	    /// <summary>
	    ///     The cjk_bigram token filter forms bigrams out of the CJK terms that are generated by the standard tokenizer or the icu_tokenizer (see ICU Analysis Plugin). By default, when a CJK character has no adjacent characters to form a bigram, it is output in unigram form. If you always want to
	    ///     output both unigrams and bigrams, set the output_unigrams flag to true. This can be used for a combined unigram+bigram approach Bigrams are generated for characters in han, hiragana, katakana and hangul, but bigrams can be disabled for particular scripts with the ignore_scripts
	    ///     parameter. All non-CJK input is passed through unmodified.
	    /// </summary>
	    /// <param name="name"> name for the custom filter </param>
	    public CjkBigramTokenFilter(string name)
        {
            AnalyzerSet = true;
            Name = name.ToLower();
            Type = DefaultTokenFilters.CjkBigram;
        }

	    /// <summary>
	    ///     ignore_scripts 
	    /// </summary>
	    public List<string> IgnoreScripts
        {
            get => _ignoreScripts;
            set
            {
                _ignoreScripts = value;
                _ignoreScriptsSet = true;
            }
        }

	    /// <summary>
	    ///     output_unigrams 
	    /// </summary>
	    public bool OutputUnigrams
        {
            get => _outputUnigrams;
            set
            {
                _outputUnigrams = value;
                _outputUnigramsSet = true;
            }
        }

        public override void WriteJson(ElasticJsonWriter elasticCrudJsonWriter)
        {
            WriteJsonBase(elasticCrudJsonWriter, WriteValues);
        }

        private void WriteValues(ElasticJsonWriter elasticCrudJsonWriter)
        {
            JsonHelper.WriteValue("type", Type, elasticCrudJsonWriter);
            JsonHelper.WriteListValue("ignore_scripts", _ignoreScripts, elasticCrudJsonWriter, _ignoreScriptsSet);
            JsonHelper.WriteValue("output_unigrams", _outputUnigrams, elasticCrudJsonWriter, _outputUnigramsSet);
        }
    }
}